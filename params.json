{"tagline":"Change tracking library for .NET","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Notify","google":"","body":"## About Notify\r\nWhen building WPF and WinForms applications, I often run into the need to know when there is a change in a data-binding data source (which implements\r\n`INotifyCollectionChanged` and/or `INotifyPropertyChanged`).\r\n\r\nFor example, imagine an application with a screen for users to edit some settings.\r\nBy default, the Save button is disabled because no change was made yet. Whenever a user makes a change to the screen, data binding triggers a change to the underlying data source and the Save button should be enabled.\r\n\r\nFor a simple screen bound to a simple underlying data source, it is easy to just listen to the `PropertyChanged` or `CollectionChanged`\r\nevents and enable the Save button accordingly. For more complicated screens with multiple tabs and nested subviews bound to multiple data sources, \r\nthis task becomes tedious and error-prone.  (Try writing code to track changes to a grand grand grand child of an element which is just added to a collection reachable via a property of a root object! There you go.)\r\n\r\nThis library is built to simplify change tracking for `INotifyCollectionChanged` and `INotifyPropertyChanged` data sources.\r\n\r\n## Using Notify\r\nAdd reference to `Notify.dll`, e.g. via NuGet\r\n```\r\nInstall-Package Notify \r\n```\r\nNext, create a `Tracker` instance to track your objects and handle its `Changed` event\r\n```csharp\r\nvar tracker = new Tracker().Track(root1, root2);\r\ntracker.Changed += _ => EnableSave();\r\n\r\n// ...sometimes later\r\ntracker.Dispose(); // stop bothering me\r\n```\r\nThat's it! The unit test includes detailed usage of the library. Go take a look and have fun being notified of changes."}